{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper-form",
  "type": "registry:example",
  "author": "shadcn (https://ui.shadcn.com)",
  "registryDependencies": [
    "stepper",
    "form"
  ],
  "files": [
    {
      "path": "examples/stepper-form.tsx",
      "content": "import * as React from \"react\"\nimport { zodResolver } from \"@hookform/resolvers/zod\"\nimport { useForm, useFormContext } from \"react-hook-form\"\nimport { z } from \"zod\"\n\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Form } from \"@/registry/new-york/ui/form\"\nimport { Input } from \"@/registry/new-york/ui/input\"\nimport { defineStepper } from \"@/registry/new-york/ui/stepper\"\n\nconst shippingSchema = z.object({\n  address: z.string().min(1, \"Address is required\"),\n  city: z.string().min(1, \"City is required\"),\n  postalCode: z.string().min(5, \"Postal code is required\"),\n})\n\nconst paymentSchema = z.object({\n  cardNumber: z.string().min(16, \"Card number is required\"),\n  expirationDate: z.string().min(5, \"Expiration date is required\"),\n  cvv: z.string().min(3, \"CVV is required\"),\n})\n\ntype ShippingFormValues = z.infer<typeof shippingSchema>\ntype PaymentFormValues = z.infer<typeof paymentSchema>\n\nconst ShippingForm = () => {\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<ShippingFormValues>()\n\n  return (\n    <div className=\"space-y-4 text-start\">\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"address\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          Address\n        </label>\n        <Input\n          id={register(\"address\").name}\n          {...register(\"address\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.address && (\n          <span className=\"text-sm text-destructive\">\n            {errors.address.message}\n          </span>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"city\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          City\n        </label>\n        <Input\n          id={register(\"city\").name}\n          {...register(\"city\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.city && (\n          <span className=\"text-sm text-destructive\">\n            {errors.city.message}\n          </span>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"postalCode\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          Postal Code\n        </label>\n        <Input\n          id={register(\"postalCode\").name}\n          {...register(\"postalCode\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.postalCode && (\n          <span className=\"text-sm text-destructive\">\n            {errors.postalCode.message}\n          </span>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction PaymentForm() {\n  const {\n    register,\n    formState: { errors },\n  } = useFormContext<PaymentFormValues>()\n\n  return (\n    <div className=\"space-y-4 text-start\">\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"cardNumber\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          Card Number\n        </label>\n        <Input\n          id={register(\"cardNumber\").name}\n          {...register(\"cardNumber\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.cardNumber && (\n          <span className=\"text-sm text-destructive\">\n            {errors.cardNumber.message}\n          </span>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"expirationDate\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          Expiration Date\n        </label>\n        <Input\n          id={register(\"expirationDate\").name}\n          {...register(\"expirationDate\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.expirationDate && (\n          <span className=\"text-sm text-destructive\">\n            {errors.expirationDate.message}\n          </span>\n        )}\n      </div>\n      <div className=\"space-y-2\">\n        <label\n          htmlFor={register(\"cvv\").name}\n          className=\"block text-sm font-medium text-primary\"\n        >\n          CVV\n        </label>\n        <Input\n          id={register(\"cvv\").name}\n          {...register(\"cvv\")}\n          className=\"block w-full rounded-md border p-2\"\n        />\n        {errors.cvv && (\n          <span className=\"text-sm text-destructive\">{errors.cvv.message}</span>\n        )}\n      </div>\n    </div>\n  )\n}\n\nfunction CompleteComponent() {\n  return <div className=\"text-center\">Thank you! Your order is complete.</div>\n}\n\nconst {\n  StepperProvider,\n  StepperControls,\n  StepperNavigation,\n  StepperStep,\n  StepperTitle,\n  useStepper,\n} = defineStepper(\n  {\n    id: \"shipping\",\n    title: \"Shipping\",\n    schema: shippingSchema,\n    Component: ShippingForm,\n  },\n  {\n    id: \"payment\",\n    title: \"Payment\",\n    schema: paymentSchema,\n    Component: PaymentForm,\n  },\n  {\n    id: \"complete\",\n    title: \"Complete\",\n    schema: z.object({}),\n    Component: CompleteComponent,\n  }\n)\n\nexport default function StepperForm() {\n  return (\n    <StepperProvider>\n      <FormStepperComponent />\n    </StepperProvider>\n  )\n}\n\nconst FormStepperComponent = () => {\n  const methods = useStepper()\n\n  const form = useForm({\n    mode: \"onTouched\",\n    resolver: zodResolver(methods.current.schema),\n  })\n\n  const onSubmit = (values: z.infer<typeof methods.current.schema>) => {\n    console.log(`Form values for step ${methods.current.id}:`, values)\n  }\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <StepperNavigation>\n          {methods.all.map((step) => (\n            <StepperStep\n              key={step.id}\n              of={step.id}\n              type={step.id === methods.current.id ? \"submit\" : \"button\"}\n              onClick={async () => {\n                const valid = await form.trigger()\n                if (!valid) return\n                methods.goTo(step.id)\n              }}\n            >\n              <StepperTitle>{step.title}</StepperTitle>\n            </StepperStep>\n          ))}\n        </StepperNavigation>\n        {methods.switch({\n          shipping: ({ Component }) => <Component />,\n          payment: ({ Component }) => <Component />,\n          complete: ({ Component }) => <Component />,\n        })}\n        <StepperControls>\n          {!methods.isLast && (\n            <Button\n              variant=\"secondary\"\n              onClick={methods.prev}\n              disabled={methods.isFirst}\n            >\n              Previous\n            </Button>\n          )}\n          <Button\n            type=\"submit\"\n            onClick={() => {\n              if (methods.isLast) {\n                return methods.reset()\n              }\n              methods.beforeNext(async () => {\n                const valid = await form.trigger()\n                if (!valid) return false\n                return true\n              })\n            }}\n          >\n            {methods.isLast ? \"Reset\" : \"Next\"}\n          </Button>\n        </StepperControls>\n      </form>\n    </Form>\n  )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}