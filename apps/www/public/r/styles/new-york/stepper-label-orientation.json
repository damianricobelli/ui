{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper-label-orientation",
  "type": "registry:example",
  "author": "shadcn (https://ui.shadcn.com)",
  "registryDependencies": [
    "stepper"
  ],
  "files": [
    {
      "path": "examples/stepper-label-orientation.tsx",
      "content": "import * as React from \"react\"\n\nimport { Button } from \"@/registry/new-york/ui/button\"\nimport { Label } from \"@/registry/new-york/ui/label\"\nimport { RadioGroup, RadioGroupItem } from \"@/registry/new-york/ui/radio-group\"\nimport {\n  Stepper,\n  StepperControls,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n  defineStepper,\n} from \"@/registry/new-york/ui/stepper\"\n\ntype LabelOrientation = \"horizontal\" | \"vertical\"\n\nconst stepperInstance = defineStepper(\n  {\n    id: \"step-1\",\n    title: \"Step 1\",\n  },\n  {\n    id: \"step-2\",\n    title: \"Step 2\",\n  },\n  {\n    id: \"step-3\",\n    title: \"Step 3\",\n  }\n)\n\nexport default function StepperVariants() {\n  const [labelOrientation, setLabelOrientation] =\n    React.useState<LabelOrientation>(\"horizontal\")\n  return (\n    <div className=\"flex w-full flex-col gap-8\">\n      <RadioGroup\n        value={labelOrientation}\n        onValueChange={(value) =>\n          setLabelOrientation(value as LabelOrientation)\n        }\n      >\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"horizontal\" id=\"horizontal-label\" />\n          <Label htmlFor=\"horizontal-label\">Horizontal</Label>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <RadioGroupItem value=\"vertical\" id=\"vertical-label\" />\n          <Label htmlFor=\"vertical-label\">Vertical</Label>\n        </div>\n      </RadioGroup>\n      <Stepper\n        instance={stepperInstance}\n        className=\"space-y-4\"\n        variant=\"horizontal\"\n        labelOrientation={labelOrientation}\n      >\n        {({ methods }) => (\n          <React.Fragment>\n            <StepperNavigation>\n              {methods.all.map((step) => (\n                <StepperStep\n                  key={step.id}\n                  of={step}\n                  onClick={() => methods.goTo(step.id)}\n                >\n                  <StepperTitle>{step.title}</StepperTitle>\n                </StepperStep>\n              ))}\n            </StepperNavigation>\n            {methods.switch({\n              \"step-1\": (step) => <Content id={step.id} />,\n              \"step-2\": (step) => <Content id={step.id} />,\n              \"step-3\": (step) => <Content id={step.id} />,\n            })}\n            <StepperControls>\n              {!methods.isLast && (\n                <Button\n                  variant=\"secondary\"\n                  onClick={methods.prev}\n                  disabled={methods.isFirst}\n                >\n                  Previous\n                </Button>\n              )}\n              <Button onClick={methods.isLast ? methods.reset : methods.next}>\n                {methods.isLast ? \"Reset\" : \"Next\"}\n              </Button>\n            </StepperControls>\n          </React.Fragment>\n        )}\n      </Stepper>\n    </div>\n  )\n}\n\nconst Content = ({ id }: { id: string }) => {\n  return (\n    <StepperPanel className=\"h-[200px] content-center rounded border bg-slate-50 p-8\">\n      <p className=\"text-xl font-normal\">Content for {id}</p>\n    </StepperPanel>\n  )\n}\n",
      "type": "registry:example",
      "target": ""
    }
  ]
}