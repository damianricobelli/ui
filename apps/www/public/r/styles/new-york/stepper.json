{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "stepper",
  "type": "registry:ui",
  "author": "shadcn (https://ui.shadcn.com)",
  "dependencies": [
    "@radix-ui/react-slot",
    "@stepperize/react",
    "class-variance-authority",
    "lucide-react"
  ],
  "registryDependencies": [
    "button",
    "separator"
  ],
  "files": [
    {
      "path": "ui/stepper.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport * as Stepperize from \"@stepperize/react\"\nimport { cva } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button, buttonVariants } from \"@/registry/new-york/ui/button\"\nimport { Separator } from \"@/registry/new-york/ui/separator\"\n\ntype StepperProviderProps<T extends Stepperize.Step[]> = StepperConfig<T> & {\n  children: React.ReactNode\n}\n\ntype StepperVariant = \"horizontal\" | \"vertical\" | \"circle\"\n\ntype StepperConfig<T extends Stepperize.Step[]> = {\n  instance: ReturnType<typeof Stepperize.defineStepper<T>>\n  variant?: StepperVariant\n}\n\nconst StepContext = React.createContext<StepperConfig<any>>({\n  instance: {} as ReturnType<typeof Stepperize.defineStepper<any>>,\n  variant: \"horizontal\",\n})\n\nconst StepperProvider = <T extends Stepperize.Step[]>({\n  children,\n  ...props\n}: StepperProviderProps<T>) => {\n  const Scope = props.instance.Scoped\n  return (\n    <Scope>\n      <StepContext.Provider value={props}>{children}</StepContext.Provider>\n    </Scope>\n  )\n}\n\nconst useStepper = <T extends Stepperize.Step[]>(): StepperConfig<T> => {\n  const context = React.useContext(StepContext)\n  if (!context) {\n    throw new Error(\"useStepper must be used within a Stepper\")\n  }\n  return context\n}\n\nfunction Stepper<T extends Stepperize.Step[]>({\n  children,\n  variant = \"horizontal\",\n  className,\n  ...props\n}: StepperConfig<T> & JSX.IntrinsicElements[\"div\"]) {\n  const { instance } = props\n\n  return (\n    <StepperProvider instance={instance} variant={variant}>\n      <div className={cn(\"stepper w-full\", className)} {...props}>\n        {children}\n      </div>\n    </StepperProvider>\n  )\n}\n\nconst StepperNavigation = ({\n  children,\n  className,\n  \"aria-label\": ariaLabel = \"Checkout Steps\",\n  ...props\n}: Omit<JSX.IntrinsicElements[\"nav\"], \"children\"> & {\n  children:\n    | React.ReactNode\n    | ((props: {\n        methods: Stepperize.Stepper<Stepperize.Step[]>\n      }) => React.ReactNode)\n}) => {\n  const { variant, instance } = useStepper()\n\n  const methods = instance.useStepper() as Stepperize.Stepper<Stepperize.Step[]>\n\n  return (\n    <nav\n      aria-label={ariaLabel}\n      className={cn(\"stepper-navigation\", className)}\n      {...props}\n    >\n      <ol className={listVariants({ variant: variant })}>\n        {typeof children === \"function\" ? children({ methods }) : children}\n      </ol>\n    </nav>\n  )\n}\n\nconst listVariants = cva(\"stepper-navigation-list flex gap-2\", {\n  variants: {\n    variant: {\n      horizontal: \"flex-row items-center justify-between\",\n      vertical: \"flex-col\",\n      circle: \"flex-row items-center justify-between\",\n    },\n  },\n})\n\nconst StepperStep = <T extends Stepperize.Step, Icon extends React.ReactNode>({\n  children,\n  className,\n  of,\n  icon,\n  ...props\n}: JSX.IntrinsicElements[\"button\"] & { of: T; icon?: Icon }) => {\n  const { instance, variant } = useStepper()\n  const methods = instance.useStepper() as Stepperize.Stepper<Stepperize.Step[]>\n\n  const currentStep = methods.current\n\n  const isLast = instance.utils.getLast().id === of.id\n  const stepIndex = instance.utils.getIndex(of.id)\n  const currentIndex = instance.utils.getIndex(currentStep?.id ?? \"\")\n  const isCurrent = currentStep?.id === of.id\n\n  const childMap = useStepChildren(children)\n\n  const title = childMap.get(\"title\")\n  const description = childMap.get(\"description\")\n  const panel = childMap.get(\"panel\")\n\n  if (variant === \"circle\") {\n    return (\n      <li\n        className={cn(\n          \"stepper-step flex shrink-0 items-center gap-4 rounded-md transition-colors\",\n          className\n        )}\n      >\n        <CircleStepIndicator\n          currentStep={stepIndex + 1}\n          totalSteps={instance.steps.length}\n        />\n        <div className=\"stepper-step-content flex flex-col items-start gap-1\">\n          {title}\n          {description}\n        </div>\n      </li>\n    )\n  }\n\n  return (\n    <>\n      <li className=\"stepper-step flex items-center gap-4\">\n        <button\n          type=\"button\"\n          role=\"tab\"\n          className={stepVariants()}\n          aria-current={isCurrent ? \"step\" : undefined}\n          aria-posinset={stepIndex + 1}\n          aria-setsize={methods.all.length}\n          aria-selected={isCurrent}\n          {...props}\n        >\n          <DefaultStepIndicator\n            stepIndex={stepIndex}\n            fill={currentIndex >= stepIndex}\n            icon={icon}\n          />\n          <div className=\"stepper-step-content flex flex-col items-start\">\n            {title}\n            {description}\n          </div>\n        </button>\n      </li>\n\n      {variant === \"horizontal\" && !isLast && (\n        <Separator\n          className={cn(\n            \"flex-1\",\n            \"transition-all duration-300 ease-in-out\",\n            stepIndex < currentIndex ? \"bg-primary\" : \"bg-muted\"\n          )}\n        />\n      )}\n\n      {variant === \"vertical\" && (\n        <div className=\"flex gap-4\" data-last={isLast}>\n          {!isLast && (\n            <div className=\"flex justify-center ps-5\">\n              <Separator\n                orientation=\"vertical\"\n                className={cn(\n                  \"h-full w-[1px]\",\n                  \"transition-all duration-300 ease-in-out\",\n                  stepIndex < currentIndex ? \"bg-primary\" : \"bg-muted\"\n                )}\n              />\n            </div>\n          )}\n          <div className=\"my-3 flex-1 ps-4\">{panel}</div>\n        </div>\n      )}\n    </>\n  )\n}\n\nconst stepVariants = cva(\n  [\n    \"stepper-step-button flex shrink-0 items-center gap-2 rounded-md transition-colors\",\n    \"focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-offset-8 focus-visible:ring-offset-background\",\n    \"disabled:pointer-events-none disabled:opacity-50\",\n  ],\n  {\n    variants: {\n      variant: {\n        horizontal: \"flex-col\",\n        vertical: \"flex-row\",\n        circle: \"flex-row\",\n      },\n    },\n  }\n)\n\nconst extractChildren = (children: React.ReactNode) => {\n  const childrenArray = React.Children.toArray(children)\n  const map = new Map<string, React.ReactNode>()\n\n  for (const child of childrenArray) {\n    if (React.isValidElement(child)) {\n      if (child.type === StepperTitle) {\n        map.set(\"title\", child)\n      } else if (child.type === StepperDescription) {\n        map.set(\"description\", child)\n      } else if (child.type === StepperPanel) {\n        map.set(\"panel\", child)\n      }\n    }\n  }\n\n  return map\n}\n\nconst useStepChildren = (children: React.ReactNode) => {\n  return React.useMemo(() => extractChildren(children), [children])\n}\n\nconst StepperTitle = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: JSX.IntrinsicElements[\"h4\"] & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"h4\"\n\n  return (\n    <Comp\n      className={cn(\"stepper-step-title text-base font-medium\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst StepperDescription = ({\n  children,\n  className,\n  asChild,\n  ...props\n}: JSX.IntrinsicElements[\"p\"] & { asChild?: boolean }) => {\n  const Comp = asChild ? Slot : \"p\"\n\n  return (\n    <Comp\n      className={cn(\n        \"stepper-step-description text-sm text-muted-foreground\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst DefaultStepIndicator = ({\n  stepIndex,\n  fill,\n  icon,\n}: {\n  stepIndex: number\n  fill: boolean\n  icon: React.ReactNode\n}) => (\n  <span\n    className={cn(\n      buttonVariants({ variant: fill ? \"default\" : \"secondary\", size: \"icon\" }),\n      \"stepper-step-indicator rounded-full transition-all duration-300 ease-in-out\"\n    )}\n  >\n    {icon ?? stepIndex + 1}\n  </span>\n)\n\ntype CircleStepIndicatorProps = {\n  currentStep: number\n  totalSteps: number\n  size?: number\n  strokeWidth?: number\n}\n\nconst CircleStepIndicator = ({\n  currentStep,\n  totalSteps,\n  size = 80,\n  strokeWidth = 6,\n}: CircleStepIndicatorProps) => {\n  const radius = (size - strokeWidth) / 2\n  const circumference = radius * 2 * Math.PI\n  const fillPercentage = (currentStep / totalSteps) * 100\n  const dashOffset = circumference - (circumference * fillPercentage) / 100\n\n  return (\n    <div className=\"stepper-step-container relative inline-flex items-center justify-center\">\n      <svg width={size} height={size}>\n        <title>Step Indicator</title>\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          className=\"text-muted-foreground\"\n        />\n        <circle\n          cx={size / 2}\n          cy={size / 2}\n          r={radius}\n          fill=\"none\"\n          stroke=\"currentColor\"\n          strokeWidth={strokeWidth}\n          strokeDasharray={circumference}\n          strokeDashoffset={dashOffset}\n          className=\"text-primary transition-all duration-300 ease-in-out\"\n          transform={`rotate(-90 ${size / 2} ${size / 2})`}\n        />\n      </svg>\n      <div className=\"absolute inset-0 flex items-center justify-center\">\n        <span className=\"text-sm font-medium\" aria-live=\"polite\">\n          {currentStep} of {totalSteps}\n        </span>\n      </div>\n    </div>\n  )\n}\n\nconst StepperPanel = <T extends Stepperize.Step>({\n  children,\n  className,\n  when,\n  asChild,\n  ...props\n}: Omit<JSX.IntrinsicElements[\"div\"], \"children\"> & {\n  asChild?: boolean\n  when: T\n  children:\n    | React.ReactNode\n    | ((props: {\n        step: T\n        methods: Stepperize.Stepper<Stepperize.Step[]>\n        onBeforeAction: (\n          action: StepAction,\n          callback: (params: {\n            prevStep: Stepperize.Step\n            nextStep: Stepperize.Step\n          }) => Promise<boolean> | boolean\n        ) => void\n      }) => React.ReactNode)\n}) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { instance } = useStepper()\n\n  const methods = instance.useStepper()\n\n  if (instance.utils.getIndex(when.id) === -1) {\n    throw new Error(`Step ${when.id} does not exist in the stepper instance`)\n  }\n\n  const onBeforeAction = React.useCallback(\n    async (\n      action: StepAction,\n      callback: (params: {\n        prevStep: Stepperize.Step\n        nextStep: Stepperize.Step\n      }) => Promise<boolean> | boolean\n    ) => {\n      const prevStep = methods.current\n      const nextStep =\n        action === \"next\"\n          ? instance.utils.getNext(prevStep.id)\n          : action === \"prev\"\n          ? instance.utils.getPrev(prevStep.id)\n          : instance.utils.getFirst()\n\n      const shouldProceed = await callback({ prevStep, nextStep })\n      if (shouldProceed) {\n        if (action === \"next\") methods.next()\n        if (action === \"prev\") methods.prev()\n        if (action === \"reset\") methods.reset()\n      }\n    },\n    [methods, instance.utils]\n  )\n\n  return (\n    <>\n      {methods.when(when.id, (step) => (\n        <Comp className={cn(\"stepper-panel flex-1\", className)} {...props}>\n          {typeof children === \"function\"\n            ? children({ step: step as T, methods, onBeforeAction })\n            : children}\n        </Comp>\n      ))}\n    </>\n  )\n}\n\nconst StepperControls = ({\n  children,\n  asChild,\n  className,\n  ...props\n}: Omit<JSX.IntrinsicElements[\"div\"], \"children\"> & {\n  asChild?: boolean\n  children:\n    | React.ReactNode\n    | ((props: {\n        methods: Stepperize.Stepper<Stepperize.Step[]>\n      }) => React.ReactNode)\n}) => {\n  const Comp = asChild ? Slot : \"div\"\n  const { instance } = useStepper()\n\n  const methods = instance.useStepper()\n\n  return (\n    <Comp\n      className={cn(\"stepper-controls flex justify-end gap-4\", className)}\n      {...props}\n    >\n      {typeof children === \"function\" ? children({ methods }) : children}\n    </Comp>\n  )\n}\n\ntype StepAction = \"next\" | \"prev\" | \"reset\"\n\ntype StepperActionProps = {\n  action: StepAction\n  children: React.ReactNode\n  asChild?: boolean\n  onBeforeAction?: ({\n    event,\n    prevStep,\n    nextStep,\n  }: {\n    event: React.MouseEvent<HTMLButtonElement>\n    prevStep: Stepperize.Step\n    nextStep: Stepperize.Step\n  }) => Promise<boolean> | boolean\n  className?: string\n}\n\nconst StepperAction = ({\n  action,\n  children,\n  asChild = false,\n  onBeforeAction,\n  className,\n  disabled,\n  ...props\n}: JSX.IntrinsicElements[\"button\"] & StepperActionProps) => {\n  const { instance } = useStepper()\n  const methods = instance.useStepper()\n\n  const currentStep = methods.current\n\n  const isDisabled = (action: StepAction) =>\n    action === \"prev\" && methods.isFirst\n\n  const actionMap = React.useMemo(\n    () => ({\n      next: methods.next,\n      prev: methods.prev,\n      reset: methods.reset,\n    }),\n    [methods]\n  )\n\n  const handleClick = React.useCallback(\n    async (event: React.MouseEvent<HTMLButtonElement>) => {\n      if (onBeforeAction) {\n        const nextStep =\n          action === \"next\"\n            ? instance.utils.getNext(currentStep.id)\n            : action === \"prev\"\n            ? instance.utils.getPrev(currentStep.id)\n            : instance.utils.getFirst()\n        const shouldProceed = await onBeforeAction({\n          event,\n          prevStep: currentStep,\n          nextStep,\n        })\n        if (!shouldProceed) {\n          return\n        }\n      }\n\n      actionMap[action]?.()\n    },\n    [onBeforeAction, actionMap, action, instance.utils, currentStep]\n  )\n\n  const Comp = asChild ? Slot : Button\n\n  if (\n    (methods.isLast && (action === \"next\" || action === \"prev\")) ||\n    (!methods.isLast && action === \"reset\")\n  ) {\n    return null\n  }\n\n  return (\n    <Comp\n      onClick={handleClick}\n      variant={action === \"prev\" ? \"secondary\" : \"default\"}\n      disabled={isDisabled(action) || disabled}\n      className={cn(\"stepper-action\", className)}\n      {...props}\n    >\n      {children}\n    </Comp>\n  )\n}\n\nconst defineStepper: typeof Stepperize.defineStepper = Stepperize.defineStepper\n\nexport {\n  Stepper,\n  StepperAction,\n  StepperControls,\n  StepperDescription,\n  StepperNavigation,\n  StepperPanel,\n  StepperStep,\n  StepperTitle,\n  defineStepper,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}